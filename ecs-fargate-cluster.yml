# note that infrastructure are named specifically to match app-deploy.yml environment variables
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack generates the resources for an ECS fargate stack with a Network Load Balancer on a public network."
Parameters:
  Image:
    Description: Image required for the Fargate container
    Type: String

  AppEnvSecret:
    Description: Secret key for the application
    Type: String

  DjangoSuperEmail:
    Description: Email for Django Super User
    Type: String

  DjangoSuperUsername:
    Description: Username for Django Super User
    Type: String

  DjangoSuperPassword:
    Description: Password for Django Super User
    Type: String

  DBName:
    Description: Name of the database for the DB instance (MySQL)
    Type: String

  DBMasterUsername:
    Description: Username for the DB instance
    Type: String
  
  DBMasterPassword:
    Description: User password for the DB instance
    Type: String

  DBEndPoint:
    Description: Rds instance endpoint
    Type: String

  SubnetId1:
    Description: Subnet 1 Id for the EcsService and Loadbalancer resource, we can either reference an existing aws subnet
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0d8b7c79c168639a9

  SubnetId2:
    Description: Subnet 2 Id for the Loadbalancer resource, for application load balancers, we need two subnets
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0e80b983f84febe4f

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id for the stack
    Default: vpc-000387cf04ba71caf

Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: simpledinein-cluster
      CapacityProviders:
        - FARGATE
  
  EcsService: 
    Type: AWS::ECS::Service
    DependsOn: ElbListener
    Properties: 
      ServiceName: simpledinein-service
      Cluster: 
        !Ref EcsCluster
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: simpledinein-app
          ContainerPort: 8000
          TargetGroupArn: !Ref ElbTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # required to be ENABLED if subnet is public
          Subnets:
            - !Ref SubnetId1
            - !Ref SubnetId2
          SecurityGroups:
            - !GetAtt ContainerSecurityGroup.GroupId
      TaskDefinition: 
        !Ref EcsTaskDefinition
  
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      RequiresCompatibilities: 
        - FARGATE
      ExecutionRoleArn: !Ref ecsTaskExecutionRole
      Family: taskdefinition-simpledinein
      ContainerDefinitions: 
        - Name: simpledinein-app
          Image: !Ref Image
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ContainerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
          PortMappings: 
            - ContainerPort: 8000
          Environment:
            - Name: 'DJANGO_SECRET_KEY'
              Value: !Ref AppEnvSecret
            - Name: 'DJANGO_SUPERUSER_EMAIL'
              Value: !Ref DjangoSuperEmail
            - Name: 'DJANGO_SUPERUSER_USERNAME'
              Value: !Ref DjangoSuperUsername
            - Name: 'DJANGO_SUPERUSER_PASSWORD'
              Value: !Ref DjangoSuperPassword
            - Name: 'MYSQL_DATABASE'
              Value: !Ref DBName
            - Name: 'MYSQL_USER'
              Value: !Ref DBMasterUsername
            - Name: 'MYSQL_PASSWORD'
              Value: !Ref DBMasterPassword
            - Name: 'MYSQL_HOST'
              Value: !Ref DBEndPoint

  # Setting up the application load balancer for EcsService.
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-loadbalancer
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets: # referencing the public subnet, application load balancers need two subnets
        - !Ref SubnetId1
        - !Ref SubnetId2

  ElbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ElbTargetGroup
      LoadBalancerArn: !Ref LoadBalancer

  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: !Sub ${AWS::StackName}-lb-tg
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Protocol: HTTP
      TargetType: ip
      Port: 8000

  ContainerLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub ${AWS::StackName}-logs
      RetentionInDays: 3

  # Creating security groups for ecs container and load balancer
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-container-sg
      GroupDescription: !Sub "Security group for ${AWS::StackName} ecs container cloudformation stack"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
  
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-loadbalancer-sg
      GroupDescription: !Sub "Security group for ${AWS::StackName} load balancer cloudformation stack"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ecsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy # AmazonECSTaskExecutionRolePolicy

Outputs:
  LoadBalancerDNS:
    Description: The DNS name for the load balancer where we can use to visit the website
    Value: !GetAtt LoadBalancer.DNSName