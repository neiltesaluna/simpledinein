name: Deploy CloudFormation infrastructure stack

on:
  workflow_dispatch
  # push:
  #   branches: [ "master" ]

env:
  AWS_REGION: ap-southeast-2             # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: simpledinein           # set this to your Amazon ECR repository name
  CFN_ECR_STACKNAME: ecr-build-stack
  CFN_ECR: ecr-build.yml
  CFN_FARGATE_STACKNAME: simpledinein-stack  
  CFN_FARGATE: ecs-fargate-cluster.yml 


permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # This step checks if the ECR image already exist by checking if the environment variable IMAGE_TAG=''.
    # Then it will continue to build the cloudformation stack for ECR.
    # Lastly it will push an initial image to the ECR to be deployed on the next job
    - name: Query latest image on AWS ECR
      id: query-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        export IMAGE_TAG=$(aws ecr describe-images --repository-name simpledinein \
        --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' | tr -d '"')
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Deploy to AWS CloudFormation
      if: ${{ env.IMAGE_TAG == '' }}
      id: build-ecr
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ env.CFN_ECR_STACKNAME }}
        template: ${{ env.CFN_ECR }}
        capabilities: 'CAPABILITY_IAM'
        parameter-overrides: "RepoName=${{ env.ECR_REPOSITORY }}"

    - name: Build, tag, and push image to Amazon ECR
      if: steps.build-ecr.outputs.EcrRepoUri
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    outputs:
      image: ${{ steps.query-image.outputs.image }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to AWS CloudFormation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ env.CFN_FARGATE_STACKNAME }}
        template: ${{ env.CFN_FARGATE }}
        capabilities: 'CAPABILITY_IAM'
        parameter-overrides: "ImageTag=${{ needs.build.outputs.image }},AppEnvSecret=${{ secrets.DJANGO_SECRET_KEY }}"
